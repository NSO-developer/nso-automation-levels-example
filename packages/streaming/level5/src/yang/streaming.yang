module streaming {
  yang-version 1.1;
  namespace "http://com/example/basic-streaming/streaming";
  prefix streaming;
  include streaming-plan;

  import ietf-inet-types {
    prefix inet;
  }
  import tailf-ncs {
    prefix ncs;
  }
  import tailf-common {
    prefix tailf;
  }
  import tailf-kicker {
    prefix kicker;
  }
  import accedian-gateway-orchestrator {
    prefix accgwo;
  }

  description
     "";

  revision 2023-11-21 {
    description
      "Initial revision.";
  }

  list dc {
    key name;  
    leaf name {
      type string;
    }

    leaf fw {
      type leafref {
        path "/ncs:devices/ncs:device/ncs:name";
      }
    }

    leaf media-origin {
      type leafref {
        path "/ncs:devices/ncs:device/ncs:name";
      }
    }

    leaf skylight {
      type leafref {
        path "/ncs:devices/ncs:device/ncs:name";
      }
      must "starts-with(deref(.)/../ncs:device-type/ncs:netconf/ncs:ned-id, 'skylight')" {
        error-message "Only the name of a skylight device makes sense here.";
      }
    }

    leaf skylight-agent-id {
      type string;
      tailf:non-strict-leafref {
        path "/ncs:devices/ncs:device/ncs:config/accgwo:accedian-components" +
             "/accgwo:sensor-agent/accgwo:agents/accgwo:agent/accgwo:agentId";
      }
    }
    leaf edge-capacity {
      type uint32;
      default 3;
    }

    container oper-status {
      config false;
      tailf:info "The actual operational state of the DC.";
      tailf:cdb-oper  {
        tailf:persistent true;
      }
      leaf jitter {
        type decimal64 {
          fraction-digits 3;
        }
        units "ms";
      }
      leaf energy-price {
        type uint32;
        units USD/MWh;
      }
      leaf-list edge-clients {
        type leafref {
          path /edge/name;
        }
      }
    }
  }

  list edge {
    key name;

    uses ncs:nano-plan-data;
    uses ncs:service-data;
    ncs:servicepoint "edge-servicepoint";

    leaf name  {
      type leafref {
        path "/ncs:devices/ncs:device/ncs:name";
      }
      // Assumes the NED ID for edge devices starts with 'edge'
      // More formal would be to use the NED identity, but that would require
      // importing the NED YANG module.
      must "starts-with(deref(.)/../ncs:device-type/ncs:netconf/ncs:ned-id, 'edge')" {
        error-message "Only the name of an edge device makes sense here.";
      }
    }
    container oper-status {
      config false;
      tailf:info "The actual operational state of the service.";
      tailf:cdb-oper  {
        tailf:persistent true;
      }
      leaf chosen-dc {
        type leafref {
          path "/dc/name";
        }
      }
    }
  }

  container actions {
    action skylight-notification {
      tailf:actionpoint skylight-notification;
      input {
        uses kicker:action-input-params;
      }
    }
    action optimize {
      tailf:actionpoint optimize;
      input {
        leaf iterations {
          type uint32;
          default 10;
        }
      }
    }
    action vary-energy-price {
      tailf:actionpoint vary-energy-price;
      input {
        leaf iterations {
          type uint32;
          default 10;
        }
      }
    }
    container oper-status {
      config false;
      tailf:info "The actual operational state of the service.";
      tailf:cdb-oper  {
        tailf:persistent true;
      }
      leaf optimization-iterations {
        type uint32;
      }
    }
  }
}
